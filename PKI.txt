CA :      172.16.1.1 , 192.168.1.110
R1 :      172.16.1.2
ESXi :    172.16.1.3  ( dramadra8# )
vCenter : 172.16.1.4

PC :      172.16.1.10
Win 11 :  172.16.1.11
Debian :  172.16.1.12

CA :
ip dns set servers=8.8.8.8 allow-remote-requests=yes
ip dns static add type=A address=172.16.1.2 name=r1.local
system clock set time-zone-name=UTC time=15:36:00 date=aug/23/2022

certificate add name=RouterOS-CA-ECDSA common-name=RouterOS-CA-ECDSA days-valid=3650 digest-algorithm=sha384 key-size=secp384r1 key-usage=key-cert-sign trusted=yes
certificate sign RouterOS-CA-ECDSA
certificate add name=R1 common-name=r1.local days-valid=3650 digest-algorithm=sha384 key-size=secp384r1 key-usage=tls-server trusted=yes subject-alt-name=DNS:r1.local
certificate sign R1 ca=RouterOS-CA-ECDSA
// certificate set trusted=yes R1
certificate export-certificate RouterOS-CA-ECDSA file-name=RouterOS-CA-ECDSA type=pem
certificate export-certificate R1 file-name=R1 type=pem export-passphrase=dramadrama

R1 :
certificate import file-name=R1.crt passphrase=dramadrama
certificate import file-name=R1.key passphrase=dramadrama
( check trusted ) --> certificate set trusted=yes
ip service set www-ssl disabled=no certificate=R1.crt_0 tls-version=only-1.2

FireFox -- Privacy & Security -- view certs -- import ( RouterOS-CA-ECDSA )


// export r1 with pcks12 ?????

mikrotik supports sftp : $ sftp admin@172.16.1.1

// Mikrotik SSH client authentication support check ...


ctrl + l : clear



// create a CSR from R1 , sign it with openssl
// add a cert to ESXi , vcenter 
// install win server , create a domain , deploy rdp or vnc pki


CSR :

R1 :

certificate add name=R1-CSR common-name=r1.local days-valid=3650 digest-algorithm=sha384 key-size=secp384r1 key-usage=tls-server subject-alt-name=DNS:r1.local
certificate create-certificate-request template=R1-CSR key-passphrase=dramadrama 

Debian :

openssl ecparam -out CA-ECDSA-secp384r1.key -name secp384r1 -genkey

// openssl ec -in CA-ECDSA-Private-Key-secp384r1.pem -des3 -out CA-ECDSA-Private-Key-secp384r1-dramadrama.pem

openssl req -new -x509 -key CA-ECDSA-secp384r1.key -days 3650 -addext keyUsage=keyCertSign -out CA-ECDSA-sha256.crt ( ..... CA-ECDSA-sha256 )

// delete ext ???

-x509 is for creating a CA only ...

// csr vs pem

openssl x509 -req -in certificate-request.pem -days 3650 -CA CA-ECDSA-sha256.crt -CAkey CA-ECDSA-secp384r1.key -set_serial 1 -extfile <( printf "subjectAltName=DNS:r1.local" ) -out Signed-CSR.crt 

certificate import file-name=Signed-CSR.crt
certificate import file-name=certificate-request_key.pem

ip service set www-ssl disabled=no certificate=Signed-CSR.crt_0

// openssl req -addext "subjectAltName=DNS:r1.local"
// openssl req -subj "/CN=r1.local"


------------------------------------------------------------------
Best Practice ::::

openssl ecparam -out CA-ECDSA-secp384r1.key -name secp384r1 -genkey
openssl req -new -x509 -key CA-ECDSA-secp384r1.key -days 3650 -addext keyUsage=keyCertSign -out CA-ECDSA-sha256.crt ( ..... CA-ECDSA-sha256 )

openssl ecparam -out R1-ECDSA-secp384r1.key -name secp384r1 -genkey
openssl req -new -key R1-ECDSA-secp384r1.key -days 3650 -addext extendedKeyUsage=serverAuth -out R1-ECDSA-sha256.csr ( ... R1-ECDSA-sha256 dramadrama )

openssl x509 -req -in R1-ECDSA-sha256.csr -days 3650 -CA CA-ECDSA-sha256.crt -CAkey CA-ECDSA-secp384r1.key -set_serial 1 -extfile <( printf "subjectAltName=DNS:r1.local" ) -out R1-ECDSA-sha256.crt

certificate import file-name=R1-ECDSA-sha256.crt
certificate import file-name=R1-ECDSA-secp384r1.key

ip service set www-ssl disabled=no tls-version=only-1.2 certificate=[] 

